# This workflow will build the project and create a release on demand
# Uses:
#   OS: ubuntu-latest
#   Go: go 1.x

name: üöÄ Release Builder

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

# Add permissions to allow pushing tags
permissions:
  contents: write

env:
  GOFLAGS: "-mod=readonly"

jobs:
  release:
    name: üì¶ Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for tagging

      - name: ‚úÖ Validate Version
        run: |
          if ! [[ ${{ github.event.inputs.version }} =~ ^v[0-9]+\.[0-9]+(\.[0-9]+)?(-[0-9a-zA-Z.-]+)?(\+[0-9a-zA-Z.-]+)?$ ]]; then
            echo "‚ùå Error: Version '${{ github.event.inputs.version }}' does not follow format vX.Y[.Z][-PRERELEASE][+BUILD]"
            echo "‚ùå Version must start with 'v'"
            exit 1
          fi
          echo "‚úÖ Version '${{ github.event.inputs.version }}' is valid"
          
          # Store original version with v prefix in environment variable
          VERSION="${{ github.event.inputs.version }}"
          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: üìù Update Version File
        run: |
          # Store version with v prefix in version.txt
          VERSION="${{ env.VERSION }}"
          echo "$VERSION" > version.txt

      - name: ‚öôÔ∏è Set up Go Environment
        uses: ./.github/actions/setup-go

      - name: üóÑÔ∏è Cache Go Modules
        uses: actions/cache@v4
        id: cache-go-modules
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-modules-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-modules-

      - name: üì¶ Install Dependencies
        run: |
          cd backend
          go mod download
          cd ../tests/integration
          go mod download

      - name: üõ†Ô∏è Build and Run Tests
        run: |
            set -e
            make all OS=$(go env GOOS) ARCH=$(go env GOARCH)

      - name: üßπ Clean Previous Builds
        run: make clean_all

      - name: üî® Build Release Artifact
        run: |
          # Define platform matrix as arrays
          PLATFORMS=(
            "windows:amd64"
            "linux:amd64"
            "linux:arm"
            "darwin:amd64"
            "darwin:arm64"
          )
          
          echo "üèóÔ∏è Building Thunder for ${#PLATFORMS[@]} platforms..."
          
          # Loop through the platform matrix
          for platform in "${PLATFORMS[@]}"; do
            # Split the platform string into OS and ARCH
            OS="${platform%%:*}"
            ARCH="${platform#*:}"
            
            echo "üî® Building Thunder backend for $OS/$ARCH..."
            make build_backend OS=$OS ARCH=$ARCH
            
            # Optional: Add a small delay to prevent resource contention
            sleep 1
          done
          
          echo "‚úÖ All platforms built successfully!"

          # ============================================================

          echo "üèóÔ∏è Building Sample applications..."

          # Define platform matrix as arrays
          SAMPLE_PLATFORMS=(
            "win:x64"
            "linux:x64"
            "linux:arm64"
            "macos:x64"
            "macos:arm64"
          )

          # Loop through the platform matrix
          for platform in "${SAMPLE_PLATFORMS[@]}"; do
            # Split the platform string into OS and ARCH
            OS="${platform%%:*}"
            ARCH="${platform#*:}"
            
            echo "üî® Building Samples for $OS/$ARCH..."
            make build_samples OS=$OS ARCH=$ARCH
            
            # Optional: Add a small delay to prevent resource contention
            sleep 1
          done

          echo "‚úÖ Sample applications built successfully!"

      - name: üìù Read Updated Version
        id: version
        run: echo "version=$(cat version.txt)" >> $GITHUB_OUTPUT

      - name: üì¶ Upload All Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: thunder-distribution
          path: target/dist/*.zip
          if-no-files-found: error

      - name: üè∑Ô∏è Create Git Tag
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          TAG_VERSION="${{ env.VERSION }}"
          if [[ ! $TAG_VERSION == v* ]]; then
            TAG_VERSION="v$TAG_VERSION"
          fi

          git tag -a "$TAG_VERSION" -m "Release $TAG_VERSION"
          git push origin "$TAG_VERSION"

      - name: üìù Extract README Content for Release
        id: readme_extract
        run: |
          # Extract introduction (everything before first --- divider)
          INTRO=$(awk 'BEGIN{flag=1} /^---$/{flag=0; exit} flag{print}' README.md)
          
          # Extract Features section
          FEATURES=$(sed -n '/^## üöÄ Features/,/^---$/p' README.md | head -n -1)
          
          # Extract Quick Start section
          QUICKSTART=$(sed -n '/^## ‚ö° Quickstart/,/^---$/p' README.md | head -n -1)
          
          # Extract license section including header
          LICENSE=$(grep -A 5 "^## License" README.md)
          
          # Combine for release description
          echo "RELEASE_BODY<<EOF" >> $GITHUB_ENV
          echo "$INTRO" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$FEATURES" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$QUICKSTART" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "$LICENSE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: üì¶ Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ env.VERSION }}
          name: Thunder ${{ env.VERSION }}
          draft: false
          prerelease: ${{ contains(env.VERSION, '-') }}
          files: target/dist/*.zip
          body: ${{ env.RELEASE_BODY }}
          generate_release_notes: false
